Providing Custom Reporters
==========================
It is possible to configure your build to use custom reporters with the jasmine-maven-plugin.
A list of reporters can be defined that will print to either standard out or save to the file system during the build process.

This can be leveraged to support reporting on metadata within your test suite.
Store information to `window` during your test execution, then retrieve it within your reporter.

Note: The final reporter is used to determine the success of the build.
Success is determined by the presence of the string " 0 failures" in the last line of the report.
This is the behavior of the `STANDARD` reporter.

Here is an example configuration:

``` xml
<build>
  <plugins>
    <plugin>
      <groupId>${project.groupId}</groupId>
      <artifactId>${project.artifactId}</artifactId>
      <version>${currentStableVersion}<version>
      <executions>
        <execution>
          <goals>
            <goal>test</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <reporters>
          <reporter>
            <reporterName>${project.basedir}${file.separator}src${file.separator}test${file.separator}resources${file.separator}reporter.js</reporterName>
          </reporter>
          <reporter>
            <reporterName>STANDARD</reporterName>
          </reporter>
        </reporters>
        <fileSystemReporters>
          <reporter>
            <fileName>TEST-jasmine.log</fileName>
            <reporterName>${project.basedir}${file.separator}src${file.separator}test${file.separator}resources${file.separator}logger.js</reporterName>
          </reporter>
          <reporter>
            <fileName>TEST-jasmine.xml</fileName>
            <reporterName>JUNIT_XML</reporterName>
          </reporter>
        </fileSystemReporters>
      </configuration>
    </plugin>
  </plugins>
</build>
```

*Standard Out Reporter:*

This example configuration will first print to standard out using the custom reporter, then using the `STANDARD` reporter.
The Success of Failure of the build will be determined by the `STANDARD` reporter in this example.

To define a custom reporter, use this interface as a template:

``` js
(function() {
  var jasmineMavenPlugin = window.jasmineMavenPlugin = window.jasmineMavenPlugin || {};

  jasmineMavenPlugin.printReport = function(r, config) {
    return "Happy Reporting!";
  };
})();
```

*File System Reporter:*

This example configuration will first execute the custom logger and store the output to `TEST-jasmine.log`, then using the standard `JUNIT_XML` reporter, store the junit xml report to `TEST-jasmine.xml`.

To define a custom file system reporter, use this interface as a template:

``` js
var fileSystemReporter;

(function() {
  fileSystemReporter = {
    report: function(reporter,debug) {
      return "Happy Reporting!";
    }
  };
})();
```
